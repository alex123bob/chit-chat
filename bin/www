#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chit-chat:server');
var http = require('http');
var io = require('socket.io')();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io.attach(server);
 
 /**
  *  room variable to record all existed rooms.
  */
  
var rooms = {};

io.on('connection', function (socket) {
    var url = socket.request.headers.referer; // get url from client request.
    url = url.split('/');
    var roomId = url[url.length - 1],
        user = '';

    socket.on('join', function (userName){
        user = userName;
        if (!rooms[roomId]) {
            rooms[roomId] = [];
        }
        rooms[roomId].push(userName);
        socket.join(roomId);
        io.to(roomId).emit('msg', bold(userName) + ' just joins the room ' + roomId);
    });

    function bold (el){
        return '<strong>' + el + '</strong>';
    }

    // check if current user is still in the chatting room or not.
    function online (){
        return rooms[roomId].indexOf(user) !== -1;
    }

    // internal event
    socket.on('message', function (msg) {
        if (!online()) {
            return false;
        }
        // if so, others in the room(id is roomId) can accept this msg except the sender itself.
        // socket.broadcast.to(roomId).emit('msg', msg);

        // in this way, we can send current msg to all users in the specific room with roomId.
        io.to(roomId).emit('msg', bold(user) + ': ' + msg);
    });

    socket.on('quit', function (){
        if (!online()) {
            return false;
        }
        socket.emit('disconnect');
    });

    // internal event
    socket.on('disconnect', function () {
        var index = rooms[roomId].indexOf(user);
        if (-1 !== index) {
            rooms[roomId].splice(index, 1);
        }
        // leaves room.
        socket.leave(roomId);
        io.to(roomId).emit('msg', user + ' leaves room "' + roomId + '".');
    });

    socket.on('input', function (inputVal){
        // if user is not online, we are not gonna send input event to any other user.
        if (!online()) {
            return false;
        }
        socket.broadcast.to(roomId).emit('input', bold(user) + ' is inputing...');
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
